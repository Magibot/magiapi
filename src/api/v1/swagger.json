{
  "openapi": "3.0.0",
  "info": {
    "title": "Magi REST API Documentation",
    "description": "The coolest Discord Bot REST API that you can find. Here you can connect your app to Magi's Platform",
    "version": "1.0.0",
    "contact": {
      "name": "Matheus Mello",
      "email": "mellomatheuslima@gmail.com",
      "url": "https://mellomaths.github.io/"
    }
  },
  "servers": [
    {
      "url": "https://magi-api.herokuapp.com/api/v1",
      "description": "Production"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register and authenticate a new user.",
        "description": "Save the user information on database and automatically authenticate, giving a session of 1 hour.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRegistration"
              }
            }
          },
          "description": "User to be registered in Magi's platform.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. The user is already registered, but in a new Discord guild.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userPayloadResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created. User is created and authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error on validate data received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Happens when the user is already registered for the guild (discordId) provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login with a registered user.",
        "description": "Authenticate a user, giving a session of 1 hour.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequest"
              }
            }
          },
          "description": "Username and password to login.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. User is created and authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Username provided does not exist in the platform.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout the user from the system.",
        "description": "If the user is logged in, this operation will detroy the user access token.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "User access token returned from the 'authenticate' operation",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'access_token'",
            "example": "access_token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content. User logged out successfully."
          },
          "401": {
            "description": "Unauthorized. Access token provided is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change the user's password.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "User access token returned from the 'authenticate' operation",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'access_token'",
            "example": "access_token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content. Password successfuly changed."
          },
          "400": {
            "description": "Bad request. The new password and it's confirmation do not match.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token provided is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. The user logged in with the token provided does not exist in database. If this ever happen, you should contact the Magi's platform administrator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset the user's password.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. Successfully reset the password and temporary password was generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. The username provided does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/guilds": {
      "post": {
        "tags": [
          "Guild"
        ],
        "summary": "Create a new guild.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guildCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. Guild registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guildResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Something on the request is conflicting with a registered guild.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/guilds/{id}": {
      "get": {
        "tags": [
          "Guild"
        ],
        "summary": "Return data from the guild by it's ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_populate",
            "description": "Will join the guild object with the child object passed. So if you send 'playlist', the operation will bring all playlist fields for all playlists registered for this guild ID.",
            "example": "playlists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Guild was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guildResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Guild with ID was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Guild"
        ],
        "summary": "Update all field of a guild.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guildCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. Guild updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guildResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Guild with ID was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Guild"
        ],
        "summary": "Update only the fields passed.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guildCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. Guild updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guildResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Guild with ID was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Guild"
        ],
        "summary": "Delete a registered guild.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content. Guild deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guildResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/guilds/{guildId}/playlists": {
      "post": {
        "tags": [
          "Playlist as Guild Resource"
        ],
        "summary": "Create a new playlist for the guild.",
        "parameters": [
          {
            "in": "path",
            "name": "guildId",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playlistCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. Playlist created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Guild with ID was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Unique key being violated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Playlist as Guild Resource"
        ],
        "summary": "Return all playlists registered for the guild.",
        "parameters": [
          {
            "in": "path",
            "name": "guildId",
            "description": "ID of guild object registered in database, or the ID Discord API uses to differ the guilds.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "typeId",
            "description": "Type of the ID sent. It can be 'objectId' (ID of the object in the database) or 'discordId' (ID of the Guild for the Discord API). If not sent, the default is 'objectId'.",
            "example": "objectId, discordId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_populate",
            "description": "Will join the playlist object with the child object passed. So if you send 'songs', the operation will bring all songs fields for all song registered for the playlist.",
            "example": "songs",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_offset",
            "description": "The index of the first element returned list.",
            "example": 20,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_limit",
            "description": "The size of the list.",
            "example": 10,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. All playlists returned successfully. If there's no playlist registered, this operation will return an empty array.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistArrayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Guild with ID was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/{id}": {
      "get": {
        "tags": [
          "Playlist"
        ],
        "summary": "Return the playlist by it's ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of playlist object registered in database.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_populate",
            "description": "Will join the playlist object with the child object passed. So if you send 'songs', the operation will bring all songs fields for all song registered for the playlist.",
            "example": "songs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Playlist object returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Resource with ID sent was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Playlist"
        ],
        "summary": "Update the playlist by it's ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of playlist object registered in database.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_populate",
            "description": "Will join the playlist object with the child object passed. So if you send 'songs', the operation will bring all songs fields for all song registered for the playlist.",
            "example": "songs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playlistCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. Playlist created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Resource with ID sent was not found in database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Unique key being violated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Playlist"
        ],
        "summary": "Delete the registered playlist by it's ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of playlist object registered in database.",
            "example": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "This route can be accessed either by a authenticated user or by a registered APP. So you send the client ID of the APP registered within Magi's platform or the user Access Token granted after authentication flow",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid, Bearer {access_token}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. It can be 'access_token' for a authenticated user or 'client_id' if you a using a registered APP",
            "example": "client_id, access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_populate",
            "description": "Will join the playlist object with the child object passed. So if you send 'songs', the operation will bring all songs fields for all song registered for the playlist.",
            "example": "songs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content. Playlist deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID or Access Token invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "userRegistration": {
        "type": "object",
        "required": [
          "username",
          "discordId"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          },
          "discordId": {
            "type": "string",
            "description": "ID that Discord uses to identify guilds. (It's not the guildId)."
          }
        }
      },
      "userRegistrationResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Temporary access token for user authentication. With that token the user can access others routes."
              },
              "tokenExpiresIn": {
                "type": "integer",
                "description": "Token expiration time in seconds."
              },
              "password": {
                "type": "string",
                "description": "Temporary password randomly generated to user's login."
              },
              "expirationDate": {
                "type": "string",
                "description": "Date when the password will expire."
              }
            }
          }
        }
      },
      "userPayloadResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Unique user identification."
                  },
                  "guilds": {
                    "type": "array",
                    "description": "All guilds the user is registered in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "isValidated": {
                    "type": "boolean",
                    "description": "Tells if the user is validated or not after registered."
                  },
                  "createdAt": {
                    "type": "string",
                    "description": "Date when the user was registered."
                  }
                }
              }
            }
          }
        }
      },
      "loginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          },
          "password": {
            "type": "string",
            "description": "Secret user password."
          }
        }
      },
      "changePasswordRequest": {
        "type": "object",
        "required": [
          "newPassword",
          "confirmationPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New password of the user."
          },
          "confirmationPassword": {
            "type": "string",
            "description": "It's confirmation to check type errors."
          }
        }
      },
      "resetPasswordRequest": {
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          }
        }
      },
      "resetPasswordResponse": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "object",
            "required": [
              "password",
              "expirationDate"
            ],
            "properties": {
              "password": {
                "type": "string",
                "description": "Temporary password generated."
              },
              "expiration": {
                "type": "string",
                "description": "Date when the password will expire."
              }
            }
          }
        }
      },
      "guildCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "discordId",
          "discordOwnerId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the guild."
          },
          "discordId": {
            "type": "string",
            "description": "The identification which Discord uses for the Guild."
          },
          "customPrefix": {
            "type": "string",
            "description": "Bot message prefix set by the user."
          },
          "region": {
            "type": "string",
            "description": "Region where the Discord guild is located."
          },
          "discordOwnerId": {
            "type": "string",
            "description": "ID of the guild owner."
          },
          "iconHash": {
            "type": "string",
            "description": "Hash of the image used as icon for the guild."
          }
        }
      },
      "guildResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "guild": {
                "$ref": "#/components/schemas/GuildObject"
              }
            }
          }
        }
      },
      "GuildObject": {
        "type": "object",
        "required": [
          "name",
          "discordId",
          "discordOwnerId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the Guild."
          },
          "name": {
            "type": "string",
            "description": "Name of the guild."
          },
          "discordId": {
            "type": "string",
            "description": "The identification which Discord uses for the Guild."
          },
          "customPrefix": {
            "type": "string",
            "description": "Bot message prefix set by the user."
          },
          "region": {
            "type": "string",
            "description": "Region where the Discord guild is located."
          },
          "discordOwnerId": {
            "type": "string",
            "description": "ID of the guild owner."
          },
          "iconHash": {
            "type": "string",
            "description": "Hash of the image used as icon for the guild."
          },
          "playlists": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the guild was created."
          }
        }
      },
      "playlistCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "creator"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the playlist."
          },
          "creator": {
            "type": "string",
            "description": "ID of the user who created the playlist."
          },
          "allowModify": {
            "type": "boolean",
            "description": "Defines wheter another person is allowed to modify the playlist or not."
          }
        }
      },
      "playlistResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "playlist": {
                "$ref": "#/components/schemas/PlaylistObject"
              }
            }
          }
        }
      },
      "playlistArrayResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "playlists": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaylistObject"
                }
              }
            }
          }
        }
      },
      "PlaylistObject": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the playlist."
          },
          "guild": {
            "type": "string",
            "description": "ID of the guild the playlist is registered."
          },
          "name": {
            "type": "string",
            "description": "Name of the playlist."
          },
          "creator": {
            "type": "string",
            "description": "ID of the user who created the playlist."
          },
          "allowModify": {
            "type": "boolean",
            "description": "Defines wheter another person is allowed to modify the playlist or not."
          },
          "songs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "errorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_errorMessageItem"
            }
          }
        }
      },
      "_errorMessageItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the error generated by the API."
          },
          "message": {
            "type": "string",
            "description": "Detailed information about what happened."
          },
          "kind": {
            "type": "string",
            "description": "Path for the error generated."
          }
        }
      }
    }
  }
}