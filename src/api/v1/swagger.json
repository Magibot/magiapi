{
  "openapi": "3.0.0",
  "info": {
    "title": "Magi REST API Documentation",
    "description": "The coolest Discord Bot REST API that you can find. Here you can connect your app to Magi's Platform",
    "version": "1.0.0",
    "contact": {
      "name": "Matheus Mello de Lima",
      "email": "mellomatheuslima@gmail.com",
      "url": "https://mellomaths.github.io/"
    }
  },
  "servers": [
    {
      "url": "https://magi-api.herokuapp.com/api/v1",
      "description": "Production"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register and authenticate a new user.",
        "description": "Save the user information on database and automatically authenticate, giving a session of 1 hour.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRegistration"
              }
            }
          },
          "description": "User to be registered in Magi's platform.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. The user is already registered, but in a new Discord guild.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userPayloadResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created. User is created and authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error on validate data received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Happens when the user is already registered for the guild (discordId) provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login with a registered user.",
        "description": "Authenticate a user, giving a session of 1 hour.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequest"
              }
            }
          },
          "description": "Username and password to login.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. User is created and authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Username provided does not exist in the platform.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout the user from the system.",
        "description": "If the user is logged in, this operation will detroy the user access token.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "User access token returned from the 'authenticate' operation",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer {{access_token}}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'access_token'",
            "example": "access_token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content. User logged out successfully."
          },
          "401": {
            "description": "Unauthorized. Access token provided is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change the user's password.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "User access token returned from the 'authenticate' operation",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer {{access_token}}"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'access_token'",
            "example": "access_token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content. Password successfuly changed."
          },
          "400": {
            "description": "Bad request. The new password and it's confirmation do not match.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token provided is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. The user logged in with the token provided does not exist in database. If this ever happen, you should contact the Magi's platform administrator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset the user's password.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Client ID of the APP registered within Magi's platform. This route is protect by client identification, only espefic apps can do the operation.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uuid"
          },
          {
            "in": "header",
            "name": "authorization_type",
            "description": "Type of authorization the user has. In this case, it's 'client_id'",
            "example": "client_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. Successfully reset the password and temporary password was generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Something is missing or wrong in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Client ID invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found. The username provided does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "userRegistration": {
        "type": "object",
        "required": [
          "username",
          "discordId"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          },
          "discordId": {
            "type": "string",
            "description": "ID that Discord uses to identify guilds. (It's not the guildId)."
          }
        }
      },
      "userRegistrationResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Temporary access token for user authentication. With that token the user can access others routes."
              },
              "tokenExpiresIn": {
                "type": "integer",
                "description": "Token expiration time in seconds."
              },
              "password": {
                "type": "string",
                "description": "Temporary password randomly generated to user's login."
              },
              "expirationDate": {
                "type": "string",
                "description": "Date when the password will expire."
              }
            }
          }
        }
      },
      "userPayloadResponse": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Unique user identification."
                  },
                  "guilds": {
                    "type": "array",
                    "description": "All guilds the user is registered in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "isValidated": {
                    "type": "boolean",
                    "description": "Tells if the user is validated or not after registered."
                  },
                  "createdAt": {
                    "type": "string",
                    "description": "Date when the user was registered."
                  }
                }
              }
            }
          }
        }
      },
      "loginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          },
          "password": {
            "type": "string",
            "description": "Secret user password."
          }
        }
      },
      "changePasswordRequest": {
        "type": "object",
        "required": [
          "newPassword",
          "confirmationPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New password of the user."
          },
          "confirmationPassword": {
            "type": "string",
            "description": "It's confirmation to check type errors."
          }
        }
      },
      "resetPasswordRequest": {
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique user identification."
          }
        }
      },
      "resetPasswordResponse": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "object",
            "required": [
              "password",
              "expirationDate"
            ],
            "properties": {
              "password": {
                "type": "string",
                "description": "Temporary password generated."
              },
              "expiration": {
                "type": "string",
                "description": "Date when the password will expire."
              }
            }
          }
        }
      },
      "errorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_errorMessageItem"
            }
          }
        }
      },
      "_errorMessageItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the error generated by the API."
          },
          "message": {
            "type": "string",
            "description": "Detailed information about what happened."
          },
          "kind": {
            "type": "string",
            "description": "Path for the error generated."
          }
        }
      }
    }
  }
}